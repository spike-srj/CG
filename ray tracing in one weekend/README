整理这篇Ray tracing in one weekend 的思路，介绍整套程序运行的步骤

for (int i = 0; i < image_width; ++i) {
    vec3 color(0, 0, 0);
    for (int s = 0; s < samples_per_pixel; ++s) {
        auto u = (i + random_double()) / image_width;
        auto v = (j + random_double()) / image_height;
        ray r = cam.get_ray(u, v);

        color += ray_color(r, world, max_depth);
    }
    color.write_color(std::cout, samples_per_pixel);
    
    
//main.cc

首先当然是main函数

int main() {
    //首先给定图像尺寸.宽200、高100、每个像素采样100次、光线最多散射50次
    const int image_width = 200;
    const int image_height = 100;
    const int samples_per_pixel = 100;
    const int max_depth = 50;
    std::cout << "P3\n" << image_width << " " << image_height << "\n255\n";

    auto R = cos(pi/4);
    //调用要展示的物体，调用random_scene()函数。这一函数保存了物体信息。
    //random_scene()返回的是hittable_list类，所以world是hittable_list类
    auto world = random_scene();
    //设置摄像机（起点、看向方向、vup、离焦点距离、aperture、宽高比、fov=20）
    vec3 lookfrom(13,2,3);
    vec3 lookat(0,0,0);
    vec3 vup(0,1,0);
    auto dist_to_focus = 10.0;
    auto aperture = 0.1;
    const auto aspect_ratio = double(image_width) / image_height;
    camera cam(lookfrom, lookat, vup, 20, aspect_ratio, aperture, dist_to_focus);
    for (int j = image_height-1; j >= 0; --j) {
        std::cerr << "\rScanlines remaining: " << j << ' ' << std::flush;
        for (int i = 0; i < image_width; ++i) {
            vec3 color(0, 0, 0);
            for (int s = 0; s < samples_per_pixel; ++s) {
                //这一段与生成光线的坐标转换并无关系，u = (i + random_double()) / image_width 只是想给不同像素赋予不同颜色
                auto u = (i + random_double()) / image_width;
                auto v = (j + random_double()) / image_height;
                ray r = cam.get_ray(u, v);
                //但是像素该赋什么值？在一开始的例子中是根据在途中的不同位置用线性插值法给了渐变的颜色值
                //但我们想要的是光线追踪，一个像素的值该由从这一像素所射到相机的光线颜色决定（包含本身发射的光、从其他位置散射、反射来的）
                color += ray_color(r, world, max_depth);
            }
            color.write_color(std::cout, samples_per_pixel);
        }
    }

    std::cerr << "\nDone.\n";
}
    
    



